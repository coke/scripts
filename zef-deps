#!/usr/bin/env raku

=begin comment

Use zef tool to identify all (nested) dependencies for a named module

This script is made available under the Artistic-2.0 license.

=end comment


our $lock = Lock.new;
our $degree = 6;
our $indent = 4;

$*OUT.out-buffer = False;

sub MAIN(Str $module)  {
    run(<zef --help>, :out, :err) or die "Can't find zef; is your PATH correct?";

    my %deps;

    my @queue = $module;

    loop {
        last unless @queue;
        my @copy = @queue.unique;
        @queue = Array.new;
        my %output;
        @copy.race(:$degree).map: -> $module {
            next if %deps{$module}:exists;

            say "# $module";
            react {
                my $proc = Proc::Async.new: ['zef', 'info', '--verbose', $module];

                whenever $proc.stdout.lines {
                    $lock.protect: {
                        %output{$module} ~= "$_\n";
                    }
                }
                whenever $proc.start {
                    done
                }
            }
        }

        for %output.kv -> $module, $data {
            my $depends = False;
            %deps{$module} = Array.new;
            for $data.lines -> $line {
                $depends = True if $line.starts-with('Depends: ');
                next unless $depends;
                next unless $line ~~ /^ \d /;

                my @chunks = $line.split('|');
                die "oops, I missed some zef format" unless @chunks.elems == 3;

                my $dep = @chunks[1].trim;
                %deps{$module}.push: $dep;
                @queue.push: $dep unless %deps{$dep}:exists;
            }
        }
    }

    # Dump the dependencies
    my %seen;
    sub show-deps($module, %deps, $depth=0) {
        print ' ' x $depth * $indent;
        print $module;
        if %seen{$module} {
            if %deps{$module}.elems {
                 print ' ...';
            }
            say '';
            return;
        }
        %seen{$module} = True;

        say '';
        for @(%deps{$module}).sort.unique -> $dep {
            next unless $dep;
            show-deps($dep, %deps, $depth+1);
        }
    }

    show-deps($module, %deps);
}

